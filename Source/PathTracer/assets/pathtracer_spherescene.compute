#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba32f)
uniform image2D img_framebuffer;
// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

struct SphereData
{
    //x-roughness,y-reflectindex
	vec4 MaterialData;
	vec3 MaterialAlbedo;
	int MaterialType;
	vec3 Center;
	float Radius;
};


layout (std430, binding = 1)
buffer GPUScene
{
	SphereData sphereData[];
};



// ------------------------------------------------------------------
// UNIFORMS ---------------------------------------------------------
// ------------------------------------------------------------------

uniform int u_NumFrames;
uniform float u_Accum;
uniform float u_FOV;
//uniform float u_AspectRatio;
uniform vec2 u_Resolution;
uniform mat4 u_InvViewMat;
uniform mat4 u_InvProjectionMat;

// ------------------------------------------------------------------
// GLOBALS ----------------------------------------------------------
// ------------------------------------------------------------------

uint g_state = 0;

// ------------------------------------------------------------------
// CONSTANTS --------------------------------------------------------
// ------------------------------------------------------------------

const float kPI = 3.14159265359;
const int kSamplesPerPixel = 100;

#define MATERIAL_LAMBERTIAN 0
#define MATERIAL_METAL 1
#define MATERIAL_DIELECTRIC 2

// ------------------------------------------------------------------
// STRUCTURES -------------------------------------------------------
// ------------------------------------------------------------------

struct Ray
{
    vec3 direction;
    vec3 origin;
};

struct HitRecord
{
    float t;
    vec3 position;
    vec3 normal;
    int material_id;
	vec3 material_albedo;
	vec4 material_data;
};

struct Metal
{
    float roughness;
};

struct Dielectric
{
    float ref_idx;
};

struct Material
{
    int type;
    vec3 albedo;
    Metal metal;
    Dielectric dielectric;
};

struct Sphere
{
    int material_id;
    float radius;
    vec3 position;
};

struct Scene
{   
    int num_spheres;
    int num_materials;
    Sphere spheres[32];
    Material materials[32];
};

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

uint rand(inout uint state)
{
    uint x = state;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 15;
    state = x;
    return x;
}

// ------------------------------------------------------------------

float random_float_01(inout uint state)
{
    return (rand(state) & 0xFFFFFF) / 16777216.0f;
}

// ------------------------------------------------------------------

vec3 random_in_unit_disk(inout uint state)
{
    float a = random_float_01(state) * 2.0f * 3.1415926f;
    vec2 xy = vec2(cos(a), sin(a));
    xy *= sqrt(random_float_01(state));
    return vec3(xy, 0);
}

// ------------------------------------------------------------------

vec3 random_in_unit_sphere(inout uint state)
{
    float z = random_float_01(state) * 2.0f - 1.0f;
    float t = random_float_01(state) * 2.0f * 3.1415926f;
    float r = sqrt(max(0.0, 1.0f - z * z));
    float x = r * cos(t);
    float y = r * sin(t);
    vec3 res = vec3(x, y, z);
    res *= pow(random_float_01(state), 1.0 / 3.0);
    return res;
}

// ------------------------------------------------------------------

vec3 random_unit_vector(inout uint state)
{
    float z = random_float_01(state) * 2.0f - 1.0f;
    float a = random_float_01(state) * 2.0f * 3.1415926f;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

// ------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// 
//----------------------------------------------------------------------------------------
float Random(vec2 uv)
{
	return fract(sin(dot(uv, vec2(12.9898f, 78.233f))) * 43758.5453123f);
}
//----------------------------------------------------------------------------------------
// 
//----------------------------------------------------------------------------------------
vec3 RandomInUnitSphere(vec3 seed)
{
	vec2 Rand = vec2(Random(seed.xy), Random(seed.xy + seed.z));
	Rand -= 0.5f;
	Rand *= 2.0f;
	float ang1 = (Rand.x + 1.0) * kPI; // [-1..1) -> [0..2*PI)
	float u = Rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
	float u2 = u * u;
	float sqrt1MinusU2 = sqrt(1.0 - u2);
	float x = sqrt1MinusU2 * cos(ang1);
	float y = sqrt1MinusU2 * sin(ang1);
	float z = u;
	return vec3(x, y, z);
}
//----------------------------------------------------------------------------------------
//	 Generate random sphere point and swap vector along the normal, if it
//	 points to the wrong of the two hemispheres.
//	 This method provides a uniform distribution over the hemisphere,
//	 provided that the sphere distribution is also uniform.
//----------------------------------------------------------------------------------------
vec3 RandomHemispherePoint(vec3 seed, vec3 n)
{
	
	vec3 v = RandomInUnitSphere(seed);
	return v * sign(dot(v, n));
}
//----------------------------------------------------------------------------------------
//	 Compute some arbitrary tangent space for orienting
//	 our disk towards the normal. We use the camera's up vector
//	 to have some fix reference vector over the whole screen.
//----------------------------------------------------------------------------------------
vec3 RandomDiskPoint(vec3 seed, vec3 n)
{
	vec3 Rand = vec3(Random(seed.xy), Random(seed.xy + seed.z), Random(seed.xy - seed.z));
	Rand -= 0.5f;
	Rand *= 2.0f;
	float r = Rand.x * 0.5 + 0.5; // [-1..1) -> [0..1)
	float Angle = (Rand.y + 1.0) * kPI; // [-1..1] -> [0..2*PI)
	float sr = sqrt(r);
	vec2 P = vec2(sr * cos(Angle), sr * sin(Angle));
	
	vec3 Tangent = normalize(Rand);
	vec3 Bitangent = cross(Tangent, n);
	Tangent = cross(Bitangent, n);

	/* Make our disk orient towards the normal. */
	return Tangent * P.x + Bitangent * P.y;
}

Ray compute_ray(float x, float y)
{
    x = x * 2.0 - 1.0;
    y = y * 2.0 - 1.0;

    vec4 clip_pos = vec4(x, y, -1.0, 1.0);
    vec4 view_pos = u_InvProjectionMat * clip_pos;

    vec3 dir = vec3(u_InvViewMat * vec4(view_pos.x, view_pos.y, -1.0, 0.0));
    dir = normalize(dir);

    vec4 origin = u_InvViewMat * vec4(0.0, 0.0, 0.0, 1.0);
    origin.xyz /= origin.w;

    /*
	vec2 d = vec2(x, y);
	float scale = tan(u_FOV * 0.5);
	d.y *= screenResolution.y / screenResolution.x * scale;
	d.x *= scale;
	vec3 rayDir = normalize(d.x * camera.right + d.y * camera.up + camera.forward);
    */
    
    Ray r;

    //r.origin = origin.xyz;
    r.direction = dir;
	r.origin = vec3(0, 0, 0);
	//r.direction = normalize(vec3(x, y, 0));

    return r;
}

// ------------------------------------------------------------------

Ray create_ray(in vec3 origin, in vec3 dir)
{
    Ray r;

    r.origin = origin;
    r.direction = dir;

    return r;
}

// ------------------------------------------------------------------

bool scatter_lambertian(in Ray in_ray, in HitRecord rec, out vec3 attenuation, out Ray scattered_ray)
{
    vec3 new_dir = rec.position + rec.normal + random_in_unit_sphere(g_state);
    scattered_ray = create_ray(rec.position, normalize(new_dir - rec.position));
    attenuation = rec.material_albedo;
    return true;
}

// ------------------------------------------------------------------

bool scatter_metal(in Ray in_ray, in HitRecord rec,out vec3 attenuation, out Ray scattered_ray)
{
    vec3 new_dir = reflect(in_ray.direction, rec.normal);
    new_dir = normalize(new_dir + rec.material_data.x * random_in_unit_sphere(g_state));
    scattered_ray = create_ray(rec.position, normalize(new_dir));
	attenuation = rec.material_albedo;

    return dot(scattered_ray.direction, rec.normal) > 0;
}

// ------------------------------------------------------------------

bool refract(in vec3 v, in vec3 n, in float ni_over_nt, out vec3 refracted)
{
    vec3 uv = normalize(v);
    float dt = dot(uv, n);
    float discriminant = 1.0 - ni_over_nt * ni_over_nt * (1 - dt * dt);

    if (discriminant > 0)
    {
        refracted = ni_over_nt * (uv - n * dt) - n * sqrt(discriminant);
        return true;
    }
    else
        return false;
}

// ------------------------------------------------------------------

float schlick(float cosine, float ref_idx)
{
    float r0 = (1.0 - ref_idx) / (1.0 + ref_idx);
    r0 = r0 * r0;
    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5);
}


// ------------------------------------------------------------------

bool scatter_dielectric(in Ray in_ray, in HitRecord rec, out vec3 attenuation, out Ray scattered_ray)
{
    vec3 outward_normal;
    vec3 reflected = reflect(in_ray.direction, rec.normal);
    float ni_over_nt;
    attenuation = vec3(1.0, 1.0, 1.0);
    vec3 refracted;
    float reflect_prob;
    float cosine;

    if (dot(in_ray.direction, rec.normal) > 0)
    {
        outward_normal = -rec.normal;
        ni_over_nt = rec.material_data.y;
        cosine = rec.material_data.y * dot(in_ray.direction, rec.normal) / length(in_ray.direction);
    }
    else
    {
        outward_normal = rec.normal;
        ni_over_nt = 1.0 / rec.material_data.y;
        cosine = -dot(in_ray.direction, rec.normal) / length(in_ray.direction);
    }

    if (refract(in_ray.direction, outward_normal, ni_over_nt, refracted))
        reflect_prob = schlick(cosine, rec.material_data.y);
    else
        reflect_prob = 1.0;

    if (random_float_01(g_state) < reflect_prob)
        scattered_ray = create_ray(rec.position, reflected);
    else
        scattered_ray = create_ray(rec.position, refracted);

    return true;
}

// ------------------------------------------------------------------

bool ray_sphere_hit(in float t_min, in float t_max, in Ray r, in SphereData s, out HitRecord hit)
{
    vec3 oc = r.origin - s.Center;
    float a = dot(r.direction, r.direction);
    float b = dot(oc, r.direction);
    float c = dot(oc, oc) - s.Radius * s.Radius;
    float discriminant = b * b - a * c;

    if (discriminant > 0.0)
    {
        float temp = (-b - sqrt(b * b - a * c)) / a;

        if (temp < t_max && temp > t_min)
        {
            hit.t = temp;
            hit.position = r.origin + r.direction * hit.t;
            hit.normal = normalize((hit.position - s.Center) / s.Radius);
            hit.material_id = s.MaterialType;
			hit.material_albedo = s.MaterialAlbedo;
			hit.material_data = s.MaterialData;
            return true;
        }

        temp = (-b + sqrt(b * b - a * c)) / a;

        if (temp < t_max && temp > t_min)
        {
            hit.t = temp;
            hit.position = r.origin + r.direction * hit.t;
            hit.normal = normalize((hit.position - s.Center) / s.Radius);
            hit.material_id = s.MaterialType;
			hit.material_albedo = s.MaterialAlbedo;
			hit.material_data = s.MaterialData;
            return true;
        }
    }

    return false;
}

bool ray_scene_hit(in float t_min, in float t_max, in Ray ray, in Scene scene, out HitRecord rec)
{
    float closest = t_max;
    bool hit_anything = false;
	int numSphere = sphereData.length();
	for (int i = 0; i < numSphere; i++)
    {
		if (ray_sphere_hit(t_min, closest, ray, sphereData[i], rec))
        {
            hit_anything = true;
            closest = rec.t;
        }
    }

    return hit_anything;
}

bool trace_once(in Ray ray, in Scene scene, out HitRecord rec)
{
    if (ray_scene_hit(0.001, 100000.0, ray, scene, rec))
        return true;
    else
        return false;
}


vec3 randomSpherePoint(vec3 rand)
{
	float ang1 = (rand.x + 1.0) * kPI; // [-1..1) -> [0..2*PI)
	float u = rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
	float u2 = u * u;
	float sqrt1MinusU2 = sqrt(1.0 - u2);
	float x = sqrt1MinusU2 * cos(ang1);
	float y = sqrt1MinusU2 * sin(ang1);
	float z = u;
	return vec3(x, y, z);
}

vec3 trace(in Ray ray, in Scene scene)
{
    HitRecord rec;
    Ray new_ray = ray;
    vec3 attenuation = vec3(0.0, 0.0, 0.0);
    int depth = 0;
    vec3 color = vec3(1.0, 1.0, 1.0);
	int maxDepth = 50;
	while (depth < maxDepth)
    {
        if (trace_once(new_ray, scene, rec))
        {   
            Ray scattered_ray;
			if (rec.material_id == MATERIAL_LAMBERTIAN)
			{
				scatter_lambertian(new_ray, rec, attenuation, scattered_ray);
				color *= attenuation;
				new_ray = scattered_ray;
			}
			else if (rec.material_id == MATERIAL_METAL)
			{
				if (scatter_metal(new_ray, rec, attenuation, scattered_ray))
				{
					color *= attenuation;
					new_ray = scattered_ray;
				}
				else
				{
					attenuation = vec3(0.0, 0.0, 0.0);
					color *= attenuation;
					break;
				}
			}
            else if (rec.material_id == MATERIAL_DIELECTRIC)
            {
                if (scatter_dielectric(new_ray, rec, attenuation, scattered_ray))
                {
                    color *= attenuation;
                    new_ray = scattered_ray;
                }
                else
                {
                    attenuation = vec3(0.0, 0.0, 0.0);
                    color *= attenuation;
                    break;
                }
            }
        }
        else
        {
            float t = 0.5 * (ray.direction.y + 1.0);
            vec3 sky_color = (1.0 - t) * vec3(1.0) + t * vec3(0.5, 0.7, 1.0);
            color *= sky_color;
            break;
        }
        depth++;
    }

    if (depth < 50) 
        return color;
    else
        return vec3(0.0, 0.0, 0.0);
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(img_framebuffer);
	vec2 uv = vec2(float(pixel_coords.x) / float(size.x), float(pixel_coords.y) / float(size.y));
    
	Scene scene;
	vec3 color = vec3(0.0);
	Ray ray;

	float aspect_ratio = 16.0 / 9.0;
	float viewport_height = 2.0;
	float viewport_width = aspect_ratio * viewport_height;
	float focal_length = 1.0;

	vec3 origin = vec3(0, 3, 8);
	vec3 horizontal = vec3(viewport_width, 0, 0);
	vec3 vertical = vec3(0, viewport_height, 0);
	vec3 lower_left_corner = origin - horizontal / 2 - vertical / 2 - vec3(0, 0, focal_length);
     
	ray.origin = origin;
    
	ray.direction = lower_left_corner + uv.x * horizontal + uv.y * vertical - origin;

	scene.num_spheres = 2;
	scene.num_materials = 2;
	g_state = gl_GlobalInvocationID.x * 1973 + gl_GlobalInvocationID.y * 9277 + uint(u_NumFrames) * 2699 | 1;

	for (int i = 0; i < kSamplesPerPixel; i++)
	{
		vec2 Seed = vec2(gl_GlobalInvocationID.xy) / size.xy;
		float Offset = (1.0 * i) / (1.0 * kSamplesPerPixel);

		vec2 Jitter = vec2(Random(Seed), Random(Seed + Offset));
		vec2 sampleUV = (vec2(gl_GlobalInvocationID.xy) + Jitter) / size.xy;
        
		ray.direction = lower_left_corner + sampleUV.x * horizontal + sampleUV.y * vertical - origin;
		color += trace(ray, scene);
	}

	color /= float(kSamplesPerPixel);
	imageStore(img_framebuffer, pixel_coords, vec4(color, 1.0));
	return;
}
